<project name="sams" default="dist-all" basedir=".">

	<property name="dir.src" value="src/main"/>
	<property name="dir.test" value="src/test"/>
	<property name="dir.build" value="build"/>
	<property name="dir.dist" value="dist"/>    
	<property name="dir.lib" location="lib"/> 
	<property name="reports.tests" location="reports"/>
	<property name="dir.libDev" location="libDev"/>
	<property name="dir.appjars" value="${dir.dist}/appjars"/>
	<property name="dir.jar" value="${dir.dist}/jar"/>
	<property name="dir.metainf" value="${dir.build}/META-INF"/>
	 
	<target id="clean" name="clean" description="Removing all autogenerated files.">
		<delete dir="${dir.build}"/>
		<delete dir="${dir.dist}"/>
        <delete dir="${reports.tests}" />	
	</target>
	
	<target id="setupBuildDir" name="setupBuildDir">
		<mkdir dir="${dir.build}"/>
		<mkdir dir="${dir.dist}"/>
		<mkdir dir="${dir.src}"/>
		<mkdir dir="${dir.jar}"/>
		<mkdir dir="${dir.appjars}"/>	
        <mkdir dir="${reports.tests}" />	
	</target>
	
	<target name="compile-src" depends="setupBuildDir" description="Compilation of all source code.">
		<javac target="1.6" srcdir="${dir.src}" destdir="${dir.build}" fork="true">
			<classpath>  
				<fileset dir="${dir.lib}">  
			    	<include name="**/*.jar" />  
			    </fileset>  
			</classpath>
		</javac>
		
		<!-- ok, now that we have a copy, compile this copy -->
		<copy todir="${dir.appjars}" >
			<fileset dir="${dir.build}" />
		</copy>            
	</target>
	
	<target name="compile-test" depends="compile-src" description="Compilation of all test code.">
		<javac target="1.6" srcdir="${dir.test}" destdir="${dir.build}" fork="true">
			<classpath>  
				<fileset dir="${dir.lib}">  
			    	<include name="**/*.jar" />  
			    </fileset> 
				<fileset dir="${dir.libDev}"> 
					<include name="**/*.jar" />  
			    </fileset> 
			</classpath>
		</javac>
		
		<!-- ok, now that we have a copy, compile this copy -->
		<copy todir="${dir.appjars}" >
			<fileset dir="${dir.build}" />
		</copy>            
	</target>
	
	<target name="getgitdetails" >
		<exec executable="git" outputproperty="git.tagstring">
			<arg value="describe"/>
	    </exec>
	    <property name="git.tag" value="${git.tagstring}"/>
	    
	</target>
	
	<target name="manifest">            
        <mkdir dir="${dir.metainf}"/> 
		<!-- Time -->
		<tstamp>
			<format property="builtat" pattern="yyyyMMdd" />
		</tstamp>
				
		<manifest file="${dir.metainf}/MANIFEST.MF2">
			<attribute name="Built-By" value="Miguel Rojas-Cherto" />
			<attribute name="Implementation-Version" value="${git.tag}" />  
			<attribute name="Built-Date" value="${builtat}" />  
			<attribute name="Main-Class" value="org.sams.main.ProcessMZData" />
		</manifest>                                            
	</target>
	
	<target id="dist-all" name="dist-all" depends="getgitdetails,manifest,compile-src" description="Builds one big jar file for the SAMS, including third-party libraries.">
		<!-- first unjar the third-party libraries that we need -->
		<unjar dest="${dir.appjars}">
			<fileset dir="${dir.lib}"/>
		</unjar>

		<!-- then zip up things -->
		<jar jarfile="${dir.jar}/${ant.project.name}-${git.tag}-b${builtat}.jar" manifest="${dir.metainf}/MANIFEST.MF2">
			
			<fileset dir="${dir.src}" includes="org/sams/config/data/**"/>
			<fileset dir="${dir.appjars}">
			<include name="**/*" />
			</fileset>
		
		</jar>
	</target>
	
	<target id="test-dist-all" name="test-dist-all" depends="compile-test" description="test-dist-all">
		<!-- first unjar the third-party libraries that we need -->
		<unjar dest="${dir.appjars}">
			<fileset dir="${dir.lib}"/>
			<fileset dir="${dir.libDev}"/>
		</unjar>
	
		<!-- then zip up things -->
		<jar jarfile="${dir.jar}/test-${ant.project.name}.jar">
			<fileset dir="${dir.src}" includes="org/sams/config/data/**"/>
			<fileset dir="${dir.appjars}">
			<include name="**/*" />
			</fileset>
		</jar>
	</target>
	
	<target id="test-all" name="test-all" depends="test-dist-all"
		description="Performs a full JUnit test for the SAMS.">
		<echo message="Testing classes for SAMS." />

		<mkdir dir="${reports.tests}"/>
		<junit printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m">
			<classpath>
				<fileset dir="${dir.lib}" >
					<include name="**/*"/>
		        </fileset>
				<fileset dir="${dir.libDev}" >
					<include name="**/*"/>
		        </fileset>
				<fileset dir="${dir.jar}" >
					<include name="**/*"/>
		        </fileset>
			</classpath>
		    <test name="org.sams.SAMSTest" haltonfailure="no" todir="${reports.tests}"
		            	     outfile="result-sams">
		    	<formatter type="brief" />
		    </test>
		</junit>
	            
	</target>
	
</project>